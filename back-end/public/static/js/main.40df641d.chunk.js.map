{"version":3,"sources":["Assets/logo-big-fill.png","Assets/logo-small-no-label.png","Context/auth.js","Components/PrivateRoute.js","Constants/network.js","Screens/Home.js","Screens/Login.js","Screens/Signup.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AuthContext","createContext","useAuth","useContext","PrivateRoute","Component","component","rest","authTokens","render","props","to","pathname","state","referer","location","BASE_API_URL","Home","useState","currentPage","setCurrentPage","lastPage","setLastPage","quiz","setQuiz","answers","setAnswers","submitDisabled","setSubmitDisabled","error","setError","score","setScore","useEffect","getQuiz","a","console","log","axios","get","headers","response","initializeGame","data","questions","length","emptyArray","Array","goToNextPage","prevPage","goToPrevPage","submit","payload","quiz_id","_id","post","errorMessage","Card","className","map","question","questionIndex","key","answer","answerIndex","Button","onClick","setAnswer","variant","disabled","filter","Login","setLoggedIn","username","setUsername","password","setPassword","setDisabled","setAuthTokens","postLogin","token","alt","width","height","src","logoBig","Form","Group","controlId","Label","Control","placeholder","onChange","e","target","value","type","Signup","firstname","setFirstname","lastname","setLastname","confirmPass","setConfirmPass","confirmChecked","setConfirmChecked","registered","setRegistered","event","preventDefault","validateForm","onSubmit","Check","label","checked","App","localStorage","getItem","Provider","setItem","Navbar","bg","Brand","href","logoSmall","Nav","Item","undefined","exact","path","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.40df641d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-big-fill.1d4accad.png\";","module.exports = __webpack_public_path__ + \"static/media/logo-small-no-label.e03c836f.png\";","import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext();\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"../Context/auth\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  const { authTokens } = useAuth();\n\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        authTokens ? (\n          <Component {...props} />\n        ) : (\n            <Redirect\n              to={{ pathname: \"/login\", state: { referer: props.location } }}\n            />\n          )\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;","export const BASE_API_URL = 'http://localhost:9000'","import React, { useState, useEffect } from \"react\";\nimport axios from 'axios';\nimport Card from \"react-bootstrap/Card\";\nimport { BASE_API_URL } from \"../Constants/network\";\nimport { useAuth } from \"../Context/auth.js\";\nimport { Button } from \"react-bootstrap\";\n\n\nfunction Home(props) {\n  const { authTokens } = useAuth();\n  const [currentPage, setCurrentPage] = useState(-1)\n  const [lastPage, setLastPage] = useState(-1)\n  const [quiz, setQuiz] = useState(null)\n  const [answers, setAnswers] = useState([])\n  const [submitDisabled, setSubmitDisabled] = useState(false)\n  const [error, setError] = useState(false);\n  const [score, setScore] = useState(0)\n\n\n  useEffect(() => {\n    getQuiz()\n  }, [])\n\n  const getQuiz = async () => {\n    try {\n      console.log(authTokens)\n      const response = await axios.get(BASE_API_URL + '/quizzes', {\n        headers: {\n          'Authorization': `JWT ${authTokens}`\n        }\n      })\n\n      console.log({ response })\n\n      initializeGame(response.data)\n    }\n    catch (error) {\n      console.log(error)\n    }\n  }\n\n  const initializeGame = (quiz) => {\n    if (quiz && quiz.questions\n      && quiz.questions.length > 0) {\n\n      setQuiz(quiz)\n\n      const emptyArray = Array(quiz.questions.length)\n      setAnswers(emptyArray)\n      setCurrentPage(0)\n      setLastPage(quiz.questions.length - 1)\n      setScore(0)\n    }\n  }\n\n  const resetGame = () => {\n    initializeGame(quiz)\n  }\n\n  const setAnswer = (questionIndex, answerIndex) => {\n    answers[questionIndex] = answerIndex\n    setAnswers(answers)\n\n    goToNextPage()\n  }\n\n  const goToNextPage = async () => {\n    if (currentPage === lastPage) return\n\n    setCurrentPage(prevPage => prevPage + 1)\n  }\n\n  const goToPrevPage = async () => {\n    if (currentPage === 0) return\n\n    setCurrentPage(prevPage => prevPage - 1)\n  }\n\n  const submit = async () => {\n    try {\n      // Again, \"loading\"\n      setSubmitDisabled(true)\n\n      // Post payload\n      const payload = {\n        quiz_id: quiz._id,\n        answers\n      }\n\n      const response = await axios.post(BASE_API_URL + '/quizzes/verify',\n        payload, {\n        headers: {\n          'Authorization': `JWT ${authTokens}`\n        }\n      })\n\n      setSubmitDisabled(false)\n\n      const score = response.data.score\n      setScore(score)\n    }\n    catch (error) {\n      setSubmitDisabled(false)\n\n      const errorMessage = error.response ?\n        error.response.data : \"Un problème est survenu, veuillez réessayez plus tard\"\n      setError(errorMessage);\n    }\n  }\n\n  if (score === 0)\n    return (\n      <Card className=\"main-card card-huge font-normal\">\n        {quiz && quiz.questions.map((question, questionIndex) =>\n          <div key={questionIndex} className={`quiz-page ${questionIndex !== currentPage ? 'display-none' : ''} `}>\n            <p key={questionIndex} className=\"quiz-question\">\n              {question.question}\n            </p>\n\n            {question.answers.map((answer, answerIndex) =>\n              <Button onClick={() => setAnswer(questionIndex, answerIndex)}\n                className='answer-button'\n                variant={answers[questionIndex] === answerIndex ? 'secondary' : 'dark'}\n                key={answerIndex}>\n                {answer}\n              </Button>\n            )}\n          </div>\n        )}\n\n        <p>\n          {(currentPage + 1) + ' / ' + (lastPage + 1)}\n        </p>\n\n        <div className=\"quiz-footer\">\n          <Button\n            variant=\"secondary\"\n            onClick={goToPrevPage}\n            disabled={currentPage === 0}>\n            {\"<\"}\n          </Button>\n\n          <Button\n            variant=\"secondary\"\n            onClick={goToNextPage}\n            disabled={currentPage === lastPage}>\n            {\">\"}\n          </Button>\n        </div>\n\n        <div>\n          <Button\n            onClick={submit}\n            disabled={answers.filter(answer => answer).length < answers.length - 1 || submitDisabled}>\n            Envoyer\n        </Button>\n\n          {error && <p className=\"error-text\">{error}</p>}\n        </div>\n      </Card >\n    )\n\n  // There're certainly better ways to do this...\n  if (score !== 0)\n    return (\n      <Card className=\"main-card card-huge font-normal\">\n        <p>\n          {`Score : ${score} pts!`}\n        </p>\n\n        <Button onClick={resetGame}>\n          Rejouer\n        </Button>\n      </Card>\n    )\n}\n\nexport default Home;","import React, { useState } from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport axios from 'axios';\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\"\nimport Button from \"react-bootstrap/Button\"\nimport logoBig from '../Assets/logo-big-fill.png'\nimport { useAuth } from \"../Context/auth.js\";\nimport { BASE_API_URL } from \"../Constants/network\";\n\nfunction Login(props) {\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const [error, setError] = useState(false);\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [disabled, setDisabled] = useState(false);\n  const { setAuthTokens, authTokens } = useAuth();\n  const referer = '/'\n\n  const postLogin = async () => {\n    try {\n      // \"Loading\"\n      setDisabled(true)\n\n      const response = await axios.post(`${BASE_API_URL}/users/login`, {\n        username,\n        password\n      })\n\n      setAuthTokens(response.data.token)\n      setDisabled(false)\n      setLoggedIn(true)\n    }\n    catch (error) {\n      const errorMessage = error.response ?\n        error.response.data : \"Un problème est survenu, veuillez réessayez plus tard\"\n      setError(errorMessage);\n    }\n  }\n\n  if (authTokens) {\n    return <Redirect to={referer} />;\n  }\n\n  return (\n    <Card className=\"main-card card-small font-normal\">\n\n      {/* Logo */}\n      <img\n        alt='logo'\n        className=\"logo-img\"\n        width='142'\n        height='128'\n        src={logoBig}\n      />\n\n      {/* Form */}\n      <Form className='form'>\n        <Form.Group controlId=\"formBasicUsername\">\n          <Form.Label>Nom d'utilisateur</Form.Label>\n          <Form.Control placeholder=\"Votre nom d'utilisateur\" onChange={e => {\n            setUsername(e.target.value);\n          }} />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Mot de passe</Form.Label>\n          <Form.Control type=\"password\" placeholder=\"Mot de passe\" onChange={e => {\n            setPassword(e.target.value);\n          }}\n          />\n        </Form.Group>\n        <Button disabled={disabled} onClick={postLogin}>Se connecter</Button>\n      </Form>\n      <Link className=\"link\" to=\"/signup\">Vous n'avez pas de compte ?</Link>\n      {error && <p className=\"error-text\">{error}</p>}\n    </Card>\n  );\n}\n\nexport default Login;","import React, { useState } from \"react\";\nimport { Link, Redirect } from 'react-router-dom';\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\"\nimport Button from \"react-bootstrap/Button\"\nimport logoBig from '../Assets/logo-big-fill.png'\nimport axios from 'axios'\nimport { BASE_API_URL } from \"../Constants/network\";\n\nfunction Signup() {\n  const [firstname, setFirstname] = useState(\"\");\n  const [lastname, setLastname] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPass, setConfirmPass] = useState(\"\");\n  const [confirmChecked, setConfirmChecked] = useState(false);\n  const [error, setError] = useState(false);\n  const [disabled, setDisabled] = useState(false);\n  const [registered, setRegistered] = useState(false);\n  const referer = '/login'\n\n  const submit = async (event) => {\n    event.preventDefault()\n\n    const error = validateForm()\n    if (error) {\n      return setError(error)\n    }\n\n    try {\n      // \"Loading\"\n      setDisabled(true)\n\n      // Request to server\n      await axios.post(`${BASE_API_URL}/users/register`, {\n        username,\n        firstname,\n        lastname,\n        password\n      })\n\n      setDisabled(false)\n      setRegistered(true)\n    }\n    catch (error) {\n      setDisabled(false)\n\n      const errorMessage = error.response ? error.response.data :\n        'Une erreur est survenue, veuillez réessayez plus tard.'\n\n      setError(errorMessage);\n    }\n  }\n\n  const validateForm = () => {\n    if (!firstname || !lastname || !username ||\n      !password || !confirmPass)\n      return \"Vous n'avez pas rempli tous les champs\"\n\n    if (password !== confirmPass)\n      return 'Les mots de passes ne correspondent pas.'\n\n    if (!confirmChecked)\n      return \"Vous n'avez pas coché la case la plus importante... Quand même.\"\n  }\n\n  if (registered) {\n    return <Redirect to={referer} />\n  }\n\n  return (\n    <Card className=\"main-card card-large font-normal\">\n      {/* Logo */}\n      <img\n        alt='logo'\n        className=\"logo-img\"\n        width='142'\n        height='128'\n        src={logoBig}\n      />\n\n      {/* Form */}\n      <Form className=\"form\" onSubmit={submit}>\n        <Form.Group controlId=\"formBasicName\">\n          <Form.Label>Nom</Form.Label>\n          <Form.Control placeholder=\"Votre Nom\" onChange={e => {\n            setLastname(e.target.value);\n          }} />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicFirstName\">\n          <Form.Label>Prénom</Form.Label>\n          <Form.Control placeholder=\"Votre Prénom\" onChange={e => {\n            setFirstname(e.target.value);\n          }} />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicUsername\">\n          <Form.Label>Nom d'utilisateur</Form.Label>\n          <Form.Control placeholder=\"Votre nom d'utilisateur\" onChange={e => {\n            setUsername(e.target.value);\n          }} />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicPassword\">\n          <Form.Label>Mot de passe</Form.Label>\n          <Form.Control type=\"password\" placeholder=\"Mot de passe\" onChange={e => {\n            setPassword(e.target.value);\n          }} />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicConfirm\">\n          <Form.Label>Confirmer le mot de passe</Form.Label>\n          <Form.Control type=\"password\" placeholder=\"Confirmer le mot de passe\" onChange={e => {\n            setConfirmPass(e.target.value);\n          }} />\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicCheckbox\">\n          <Form.Check type=\"checkbox\" label=\"J'ai lu les conditions qui n'existent pas.\" onChange={e => {\n            console.log(e.target.checked)\n            setConfirmChecked(e.target.checked);\n          }} />\n        </Form.Group>\n\n        <Button className=\"button\" disabled={disabled} variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n      <Link className='link' to=\"/login\">Vous avez déjà un compte ?</Link>\n      {error && <p className=\"error-text\">{error}</p>}\n    </Card>\n  );\n}\n\nexport default Signup;\n\n","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\r\nimport PrivateRoute from './Components/PrivateRoute';\r\nimport Home from \"./Screens/Home\";\r\nimport { AuthContext } from \"./Context/auth.js\";\r\nimport Login from \"./Screens/Login\";\r\nimport Signup from './Screens/Signup';\r\nimport Navbar from 'react-bootstrap/Navbar'\r\nimport logoSmall from './Assets/logo-small-no-label.png'\r\nimport { Nav } from 'react-bootstrap';\r\n\r\nfunction App() {\r\n  const [authTokens, setAuthTokens] = useState();\r\n\r\n  const setTokens = (data) => {\r\n    localStorage.setItem(\"tokens\", data);\r\n    setAuthTokens(data);\r\n  }\r\n\r\n  const logout = () => {\r\n    setAuthTokens(undefined)\r\n  }\r\n\r\n  useEffect(() => {\r\n    setAuthTokens(localStorage.getItem(\"tokens\"))\r\n  }, [])\r\n\r\n  return (\r\n    <Router>\r\n      <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\r\n        <section className=\"App-background\">\r\n          {/* Navigation bar */}\r\n          <Navbar bg=\"dark\" className=\"navbar\" variant=\"dark\">\r\n            <section className=\"brand\">\r\n              <Navbar.Brand href=\"#home\">\r\n                <img\r\n                  alt=\"\"\r\n                  src={logoSmall}\r\n                  width=\"52\"\r\n                  height=\"48\"\r\n                  className=\"d-inline-block align-top\"\r\n                />{' '}\r\n              </Navbar.Brand>\r\n              <span className=\"appName nav-link\">\r\n                Quizzy\r\n              </span>\r\n            </section>\r\n\r\n            <section className=\"nav-buttons\">\r\n              {!authTokens ?\r\n                /* Before loging in */\r\n                (<Nav>\r\n                  <Nav.Item>\r\n                    <Link to='/login' className='nav-link'>Login</Link>\r\n                  </Nav.Item>\r\n                  <Nav.Item>\r\n                    <Link to='/signup' className='nav-link'>Register</Link>\r\n                  </Nav.Item>\r\n                </Nav>\r\n                )\r\n                :\r\n                /* After loging in*/\r\n                (<Nav>\r\n                  <Nav.Item>\r\n                    <Link to='/login' onClick={logout} className='nav-link'>Logout</Link>\r\n                  </Nav.Item>\r\n                </Nav>\r\n                )\r\n              }\r\n            </section>\r\n          </Navbar>\r\n\r\n          {/* App Body */}\r\n          <Switch>\r\n            <PrivateRoute exact path=\"/\" component={Home} />\r\n            <Route path=\"/login\" component={Login} />\r\n            <Route path=\"/signup\" component={Signup} />\r\n          </Switch>\r\n        </section>\r\n      </AuthContext.Provider>\r\n    </Router >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}